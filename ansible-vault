ansible -m setup --connection=local localhost

[Ansible Vault로 변수 암호화]
Ansible-vault encrpyt_string 명령을 통해서, YAML 파일 내의 단일 값을 암호화 할 수 있습니다.


변수 암호화
 : 'a_password_file'에 저장된 비밀번호를 이용해서, 'foobar'를 암호화후 변수 이름을 'the_secret'으로 지정
ansible-vault encrypt_string --vault-password-file a_password_file 'foobar' --name 'the_secret'


https://moonstrike.github.io/ansible/2016/10/08/Ansible-Variables.html



여러 볼트 암호를 사용하는 경우 볼트 ID를 사용하여 하나의 암호를 다른 암호와 구별할 수 있습니다. 세 가지 방법으로 볼트 ID를 사용합니다. 

  - 암호화된 콘텐츠를 생성할 때 --vault-id를 사용하여 ansible-vault 명령에 전달합니다.
  - 해당 볼트 ID에 대한 비밀번호를 저장할 때마다 이를 포함합니다(볼트 비밀번호 저장 및 액세스 참조).
  - 해당 볼트 ID로 암호화한 콘텐츠를 사용하는 플레이북을 실행할 때 --vault-id를 사용하여 ansible-playbook 명령에 전달합니다.

Vault ID를 ansible-vault 명령에 대한 옵션으로 전달할 때 암호화된 콘텐츠에 레이블(힌트 또는 닉네임)을 추가합니다.
이 레이블은 암호화에 사용한 암호를 문서화합니다.
암호화된 변수 또는 파일은 헤더에 일반 텍스트로 된 볼트 ID 레이블을 포함합니다.
볼트 ID는 암호화된 콘텐츠 이전의 마지막 요소입니다.


# ansible-vault encrypt_string <password_source> '<string_to_encrypt>' --name '<string_name_of_variable>'

For example, to encrypt the string ‘foobar’ using the only password stored in ‘a_password_file’ and name the variable ‘the_secret’:

# ansible-vault encrypt_string --vault-password-file a_password_file 'foobar' --name 'the_secret'

The command above creates this content:

the_secret: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      62313365396662343061393464336163383764373764613633653634306231386433626436623361
      6134333665353966363534333632666535333761666131620a663537646436643839616531643561
      63396265333966386166373632626539326166353965363262633030333630313338646335303630
      3438626666666137650a353638643435666633633964366338633066623234616432373231333331
      6564



      Passing vault IDs


You can also use the --vault-id option to pass a single password with its vault label. This approach is clearer when multiple vaults are used within a single inventory.

To prompt for the password for the ‘dev’ vault ID:

# ansible-playbook --vault-id dev@prompt site.yml

To retrieve the password for the ‘dev’ vault ID from the dev-password file:

# ansible-playbook --vault-id dev@dev-password site.yml

To get the password for the ‘dev’ vault ID from the vault password client script my-vault-password-client.py:

# ansible-playbook --vault-id dev@my-vault-password-client.py

Passing multiple vault passwords
If your task or playbook requires multiple encrypted variables or files that you encrypted with different vault IDs, 
you must use the --vault-id option, passing multiple --vault-id options to specify the vault IDs (‘dev’, ‘prod’, ‘cloud’, ‘db’) 
and sources for the passwords (prompt, file, script). . 
For example, to use a ‘dev’ password read from a file and to be prompted for the ‘prod’ password:

# ansible-playbook --vault-id dev@dev-password --vault-id prod@prompt site.yml

By default the vault ID labels (dev, prod and so on) are only hints. 
Ansible attempts to decrypt vault content with each password. 
The password with the same label as the encrypted data will be tried first, after that each vault secret will be tried in the order they were provided on the command line.

Where the encrypted data has no label, or the label does not match any of the provided labels, the passwords will be tried in the order they are specified. 
In the example above, the ‘dev’ password will be tried first, then the ‘prod’ password for cases where Ansible doesn’t know which vault ID is used to encrypt something